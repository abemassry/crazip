
hello = 'hello world\n'

h2 = mmh3.hash64(hello)
print h2

h3 = mmh3.hash64(hello)
h4 = mmh3.hash64('helloworld')

print h3
print h4

if (h2 == h3):
  print "2 and 3 are equal"

if (h2 == h4):
  print "2 and 4 are equal"
else:
  print "2 and 4 are not equal"



  print contents
  beforestr = str(contents)
  print beforestr
  h5 = mmh3.hash64(contents)
  h6 = mmh3.hash64(beforestr)
  print h5
  print h6
  if (h2 == h5):
    print "2 and 5 are equal"
  else:
    print "2 and 5 are not equal"
  if (h2 == h6):
    print "2 and 6 are equal"
  else:
    print "2 and 6 are not equal"
  
  print " "
  print " "

  f2 = open(sys.argv[2], "r")
  contents2 = f2.read()
  f2.close()
  print "contents2"
  print contents2
  h7 = mmh3.hash64(contents2)
  print h7
  if (h2 == h7):
    print "2 and 7 are equal"
  else:
    print "2 and 7 are not equal"

  if (h5 == h7):
    print "5 and 7 are equal"
  else:
    print "5 and 7 are not equal"

  print "contents"
  print repr(contents)
  print contents.encode('hex')
  print "contents2"
  print repr(contents2)
  print contents2.encode('hex')
  print "hello"
  print repr(hello)
  print hello.encode('hex')
j=0
for i in range(0, 10000000):
  rands = str(bytearray(os.urandom(size)))
  h1 = mmh3.hash64(rands)
  if (h1 == ohash):
    solution = rands
    break
  #endif
  if (j == 1000000):
    print i
    j=0
  #endif
  j = j + 1
#endfor
h1 = mmh3.hash64(contents)
h1str = str(h1)
size = os.path.getsize('./'+filename)
sizestr = str(size)
threads = []
for i in range(1,cores):
  istr = str(i)
  thread = myThread(i, "Thread-"+istr, i, size, ohash)
  thread.start()
  threads.append(thread)

for t in threads:
  t.join()
  if (printed == 0):
    if 'solution' in globals():
      answer = str(solution)
      print 'the answer is'
      print answer
      print 'found by: '+found_by
      printed = 1
